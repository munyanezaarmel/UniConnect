/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fix-webm-duration";
exports.ids = ["vendor-chunks/fix-webm-duration"];
exports.modules = {

/***/ "(ssr)/./node_modules/fix-webm-duration/fix-webm-duration.js":
/*!*************************************************************!*\
  !*** ./node_modules/fix-webm-duration/fix-webm-duration.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (name, definition) {\n    if (true) { // RequireJS / AMD\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})('fix-webm-duration', function () {\n    /*\n     * This is the list of possible WEBM file sections by their IDs.\n     * Possible types: Container, Binary, Uint, Int, String, Float, Date\n     */\n    var sections = {\n        0xa45dfa3: { name: 'EBML', type: 'Container' },\n        0x286: { name: 'EBMLVersion', type: 'Uint' },\n        0x2f7: { name: 'EBMLReadVersion', type: 'Uint' },\n        0x2f2: { name: 'EBMLMaxIDLength', type: 'Uint' },\n        0x2f3: { name: 'EBMLMaxSizeLength', type: 'Uint' },\n        0x282: { name: 'DocType', type: 'String' },\n        0x287: { name: 'DocTypeVersion', type: 'Uint' },\n        0x285: { name: 'DocTypeReadVersion', type: 'Uint' },\n        0x6c: { name: 'Void', type: 'Binary' },\n        0x3f: { name: 'CRC-32', type: 'Binary' },\n        0xb538667: { name: 'SignatureSlot', type: 'Container' },\n        0x3e8a: { name: 'SignatureAlgo', type: 'Uint' },\n        0x3e9a: { name: 'SignatureHash', type: 'Uint' },\n        0x3ea5: { name: 'SignaturePublicKey', type: 'Binary' },\n        0x3eb5: { name: 'Signature', type: 'Binary' },\n        0x3e5b: { name: 'SignatureElements', type: 'Container' },\n        0x3e7b: { name: 'SignatureElementList', type: 'Container' },\n        0x2532: { name: 'SignedElement', type: 'Binary' },\n        0x8538067: { name: 'Segment', type: 'Container' },\n        0x14d9b74: { name: 'SeekHead', type: 'Container' },\n        0xdbb: { name: 'Seek', type: 'Container' },\n        0x13ab: { name: 'SeekID', type: 'Binary' },\n        0x13ac: { name: 'SeekPosition', type: 'Uint' },\n        0x549a966: { name: 'Info', type: 'Container' },\n        0x33a4: { name: 'SegmentUID', type: 'Binary' },\n        0x3384: { name: 'SegmentFilename', type: 'String' },\n        0x1cb923: { name: 'PrevUID', type: 'Binary' },\n        0x1c83ab: { name: 'PrevFilename', type: 'String' },\n        0x1eb923: { name: 'NextUID', type: 'Binary' },\n        0x1e83bb: { name: 'NextFilename', type: 'String' },\n        0x444: { name: 'SegmentFamily', type: 'Binary' },\n        0x2924: { name: 'ChapterTranslate', type: 'Container' },\n        0x29fc: { name: 'ChapterTranslateEditionUID', type: 'Uint' },\n        0x29bf: { name: 'ChapterTranslateCodec', type: 'Uint' },\n        0x29a5: { name: 'ChapterTranslateID', type: 'Binary' },\n        0xad7b1: { name: 'TimecodeScale', type: 'Uint' },\n        0x489: { name: 'Duration', type: 'Float' },\n        0x461: { name: 'DateUTC', type: 'Date' },\n        0x3ba9: { name: 'Title', type: 'String' },\n        0xd80: { name: 'MuxingApp', type: 'String' },\n        0x1741: { name: 'WritingApp', type: 'String' },\n        // 0xf43b675: { name: 'Cluster', type: 'Container' },\n        0x67: { name: 'Timecode', type: 'Uint' },\n        0x1854: { name: 'SilentTracks', type: 'Container' },\n        0x18d7: { name: 'SilentTrackNumber', type: 'Uint' },\n        0x27: { name: 'Position', type: 'Uint' },\n        0x2b: { name: 'PrevSize', type: 'Uint' },\n        0x23: { name: 'SimpleBlock', type: 'Binary' },\n        0x20: { name: 'BlockGroup', type: 'Container' },\n        0x21: { name: 'Block', type: 'Binary' },\n        0x22: { name: 'BlockVirtual', type: 'Binary' },\n        0x35a1: { name: 'BlockAdditions', type: 'Container' },\n        0x26: { name: 'BlockMore', type: 'Container' },\n        0x6e: { name: 'BlockAddID', type: 'Uint' },\n        0x25: { name: 'BlockAdditional', type: 'Binary' },\n        0x1b: { name: 'BlockDuration', type: 'Uint' },\n        0x7a: { name: 'ReferencePriority', type: 'Uint' },\n        0x7b: { name: 'ReferenceBlock', type: 'Int' },\n        0x7d: { name: 'ReferenceVirtual', type: 'Int' },\n        0x24: { name: 'CodecState', type: 'Binary' },\n        0x35a2: { name: 'DiscardPadding', type: 'Int' },\n        0xe: { name: 'Slices', type: 'Container' },\n        0x68: { name: 'TimeSlice', type: 'Container' },\n        0x4c: { name: 'LaceNumber', type: 'Uint' },\n        0x4d: { name: 'FrameNumber', type: 'Uint' },\n        0x4b: { name: 'BlockAdditionID', type: 'Uint' },\n        0x4e: { name: 'Delay', type: 'Uint' },\n        0x4f: { name: 'SliceDuration', type: 'Uint' },\n        0x48: { name: 'ReferenceFrame', type: 'Container' },\n        0x49: { name: 'ReferenceOffset', type: 'Uint' },\n        0x4a: { name: 'ReferenceTimeCode', type: 'Uint' },\n        0x2f: { name: 'EncryptedBlock', type: 'Binary' },\n        0x654ae6b: { name: 'Tracks', type: 'Container' },\n        0x2e: { name: 'TrackEntry', type: 'Container' },\n        0x57: { name: 'TrackNumber', type: 'Uint' },\n        0x33c5: { name: 'TrackUID', type: 'Uint' },\n        0x3: { name: 'TrackType', type: 'Uint' },\n        0x39: { name: 'FlagEnabled', type: 'Uint' },\n        0x8: { name: 'FlagDefault', type: 'Uint' },\n        0x15aa: { name: 'FlagForced', type: 'Uint' },\n        0x1c: { name: 'FlagLacing', type: 'Uint' },\n        0x2de7: { name: 'MinCache', type: 'Uint' },\n        0x2df8: { name: 'MaxCache', type: 'Uint' },\n        0x3e383: { name: 'DefaultDuration', type: 'Uint' },\n        0x34e7a: { name: 'DefaultDecodedFieldDuration', type: 'Uint' },\n        0x3314f: { name: 'TrackTimecodeScale', type: 'Float' },\n        0x137f: { name: 'TrackOffset', type: 'Int' },\n        0x15ee: { name: 'MaxBlockAdditionID', type: 'Uint' },\n        0x136e: { name: 'Name', type: 'String' },\n        0x2b59c: { name: 'Language', type: 'String' },\n        0x6: { name: 'CodecID', type: 'String' },\n        0x23a2: { name: 'CodecPrivate', type: 'Binary' },\n        0x58688: { name: 'CodecName', type: 'String' },\n        0x3446: { name: 'AttachmentLink', type: 'Uint' },\n        0x1a9697: { name: 'CodecSettings', type: 'String' },\n        0x1b4040: { name: 'CodecInfoURL', type: 'String' },\n        0x6b240: { name: 'CodecDownloadURL', type: 'String' },\n        0x2a: { name: 'CodecDecodeAll', type: 'Uint' },\n        0x2fab: { name: 'TrackOverlay', type: 'Uint' },\n        0x16aa: { name: 'CodecDelay', type: 'Uint' },\n        0x16bb: { name: 'SeekPreRoll', type: 'Uint' },\n        0x2624: { name: 'TrackTranslate', type: 'Container' },\n        0x26fc: { name: 'TrackTranslateEditionUID', type: 'Uint' },\n        0x26bf: { name: 'TrackTranslateCodec', type: 'Uint' },\n        0x26a5: { name: 'TrackTranslateTrackID', type: 'Binary' },\n        0x60: { name: 'Video', type: 'Container' },\n        0x1a: { name: 'FlagInterlaced', type: 'Uint' },\n        0x13b8: { name: 'StereoMode', type: 'Uint' },\n        0x13c0: { name: 'AlphaMode', type: 'Uint' },\n        0x13b9: { name: 'OldStereoMode', type: 'Uint' },\n        0x30: { name: 'PixelWidth', type: 'Uint' },\n        0x3a: { name: 'PixelHeight', type: 'Uint' },\n        0x14aa: { name: 'PixelCropBottom', type: 'Uint' },\n        0x14bb: { name: 'PixelCropTop', type: 'Uint' },\n        0x14cc: { name: 'PixelCropLeft', type: 'Uint' },\n        0x14dd: { name: 'PixelCropRight', type: 'Uint' },\n        0x14b0: { name: 'DisplayWidth', type: 'Uint' },\n        0x14ba: { name: 'DisplayHeight', type: 'Uint' },\n        0x14b2: { name: 'DisplayUnit', type: 'Uint' },\n        0x14b3: { name: 'AspectRatioType', type: 'Uint' },\n        0xeb524: { name: 'ColourSpace', type: 'Binary' },\n        0xfb523: { name: 'GammaValue', type: 'Float' },\n        0x383e3: { name: 'FrameRate', type: 'Float' },\n        0x61: { name: 'Audio', type: 'Container' },\n        0x35: { name: 'SamplingFrequency', type: 'Float' },\n        0x38b5: { name: 'OutputSamplingFrequency', type: 'Float' },\n        0x1f: { name: 'Channels', type: 'Uint' },\n        0x3d7b: { name: 'ChannelPositions', type: 'Binary' },\n        0x2264: { name: 'BitDepth', type: 'Uint' },\n        0x62: { name: 'TrackOperation', type: 'Container' },\n        0x63: { name: 'TrackCombinePlanes', type: 'Container' },\n        0x64: { name: 'TrackPlane', type: 'Container' },\n        0x65: { name: 'TrackPlaneUID', type: 'Uint' },\n        0x66: { name: 'TrackPlaneType', type: 'Uint' },\n        0x69: { name: 'TrackJoinBlocks', type: 'Container' },\n        0x6d: { name: 'TrackJoinUID', type: 'Uint' },\n        0x40: { name: 'TrickTrackUID', type: 'Uint' },\n        0x41: { name: 'TrickTrackSegmentUID', type: 'Binary' },\n        0x46: { name: 'TrickTrackFlag', type: 'Uint' },\n        0x47: { name: 'TrickMasterTrackUID', type: 'Uint' },\n        0x44: { name: 'TrickMasterTrackSegmentUID', type: 'Binary' },\n        0x2d80: { name: 'ContentEncodings', type: 'Container' },\n        0x2240: { name: 'ContentEncoding', type: 'Container' },\n        0x1031: { name: 'ContentEncodingOrder', type: 'Uint' },\n        0x1032: { name: 'ContentEncodingScope', type: 'Uint' },\n        0x1033: { name: 'ContentEncodingType', type: 'Uint' },\n        0x1034: { name: 'ContentCompression', type: 'Container' },\n        0x254: { name: 'ContentCompAlgo', type: 'Uint' },\n        0x255: { name: 'ContentCompSettings', type: 'Binary' },\n        0x1035: { name: 'ContentEncryption', type: 'Container' },\n        0x7e1: { name: 'ContentEncAlgo', type: 'Uint' },\n        0x7e2: { name: 'ContentEncKeyID', type: 'Binary' },\n        0x7e3: { name: 'ContentSignature', type: 'Binary' },\n        0x7e4: { name: 'ContentSigKeyID', type: 'Binary' },\n        0x7e5: { name: 'ContentSigAlgo', type: 'Uint' },\n        0x7e6: { name: 'ContentSigHashAlgo', type: 'Uint' },\n        0xc53bb6b: { name: 'Cues', type: 'Container' },\n        0x3b: { name: 'CuePoint', type: 'Container' },\n        0x33: { name: 'CueTime', type: 'Uint' },\n        0x37: { name: 'CueTrackPositions', type: 'Container' },\n        0x77: { name: 'CueTrack', type: 'Uint' },\n        0x71: { name: 'CueClusterPosition', type: 'Uint' },\n        0x70: { name: 'CueRelativePosition', type: 'Uint' },\n        0x32: { name: 'CueDuration', type: 'Uint' },\n        0x1378: { name: 'CueBlockNumber', type: 'Uint' },\n        0x6a: { name: 'CueCodecState', type: 'Uint' },\n        0x5b: { name: 'CueReference', type: 'Container' },\n        0x16: { name: 'CueRefTime', type: 'Uint' },\n        0x17: { name: 'CueRefCluster', type: 'Uint' },\n        0x135f: { name: 'CueRefNumber', type: 'Uint' },\n        0x6b: { name: 'CueRefCodecState', type: 'Uint' },\n        0x941a469: { name: 'Attachments', type: 'Container' },\n        0x21a7: { name: 'AttachedFile', type: 'Container' },\n        0x67e: { name: 'FileDescription', type: 'String' },\n        0x66e: { name: 'FileName', type: 'String' },\n        0x660: { name: 'FileMimeType', type: 'String' },\n        0x65c: { name: 'FileData', type: 'Binary' },\n        0x6ae: { name: 'FileUID', type: 'Uint' },\n        0x675: { name: 'FileReferral', type: 'Binary' },\n        0x661: { name: 'FileUsedStartTime', type: 'Uint' },\n        0x662: { name: 'FileUsedEndTime', type: 'Uint' },\n        0x43a770: { name: 'Chapters', type: 'Container' },\n        0x5b9: { name: 'EditionEntry', type: 'Container' },\n        0x5bc: { name: 'EditionUID', type: 'Uint' },\n        0x5bd: { name: 'EditionFlagHidden', type: 'Uint' },\n        0x5db: { name: 'EditionFlagDefault', type: 'Uint' },\n        0x5dd: { name: 'EditionFlagOrdered', type: 'Uint' },\n        0x36: { name: 'ChapterAtom', type: 'Container' },\n        0x33c4: { name: 'ChapterUID', type: 'Uint' },\n        0x1654: { name: 'ChapterStringUID', type: 'String' },\n        0x11: { name: 'ChapterTimeStart', type: 'Uint' },\n        0x12: { name: 'ChapterTimeEnd', type: 'Uint' },\n        0x18: { name: 'ChapterFlagHidden', type: 'Uint' },\n        0x598: { name: 'ChapterFlagEnabled', type: 'Uint' },\n        0x2e67: { name: 'ChapterSegmentUID', type: 'Binary' },\n        0x2ebc: { name: 'ChapterSegmentEditionUID', type: 'Uint' },\n        0x23c3: { name: 'ChapterPhysicalEquiv', type: 'Uint' },\n        0xf: { name: 'ChapterTrack', type: 'Container' },\n        0x9: { name: 'ChapterTrackNumber', type: 'Uint' },\n        0x0: { name: 'ChapterDisplay', type: 'Container' },\n        0x5: { name: 'ChapString', type: 'String' },\n        0x37c: { name: 'ChapLanguage', type: 'String' },\n        0x37e: { name: 'ChapCountry', type: 'String' },\n        0x2944: { name: 'ChapProcess', type: 'Container' },\n        0x2955: { name: 'ChapProcessCodecID', type: 'Uint' },\n        0x50d: { name: 'ChapProcessPrivate', type: 'Binary' },\n        0x2911: { name: 'ChapProcessCommand', type: 'Container' },\n        0x2922: { name: 'ChapProcessTime', type: 'Uint' },\n        0x2933: { name: 'ChapProcessData', type: 'Binary' },\n        0x254c367: { name: 'Tags', type: 'Container' },\n        0x3373: { name: 'Tag', type: 'Container' },\n        0x23c0: { name: 'Targets', type: 'Container' },\n        0x28ca: { name: 'TargetTypeValue', type: 'Uint' },\n        0x23ca: { name: 'TargetType', type: 'String' },\n        0x23c5: { name: 'TagTrackUID', type: 'Uint' },\n        0x23c9: { name: 'TagEditionUID', type: 'Uint' },\n        0x23c4: { name: 'TagChapterUID', type: 'Uint' },\n        0x23c6: { name: 'TagAttachmentUID', type: 'Uint' },\n        0x27c8: { name: 'SimpleTag', type: 'Container' },\n        0x5a3: { name: 'TagName', type: 'String' },\n        0x47a: { name: 'TagLanguage', type: 'String' },\n        0x484: { name: 'TagDefault', type: 'Uint' },\n        0x487: { name: 'TagString', type: 'String' },\n        0x485: { name: 'TagBinary', type: 'Binary' }\n    };\n\n    function doInherit(newClass, baseClass) {\n        newClass.prototype = Object.create(baseClass.prototype);\n        newClass.prototype.constructor = newClass;\n    }\n\n    function WebmBase(name, type) {\n        this.name = name || 'Unknown';\n        this.type = type || 'Unknown';\n    }\n    WebmBase.prototype.updateBySource = function() { };\n    WebmBase.prototype.setSource = function(source) {\n        this.source = source;\n        this.updateBySource();\n    };\n    WebmBase.prototype.updateByData = function() { };\n    WebmBase.prototype.setData = function(data) {\n        this.data = data;\n        this.updateByData();\n    };\n\n    function WebmUint(name, type) {\n        WebmBase.call(this, name, type || 'Uint');\n    }\n    doInherit(WebmUint, WebmBase);\n    function padHex(hex) {\n        return hex.length % 2 === 1 ? '0' + hex : hex;\n    }\n    WebmUint.prototype.updateBySource = function() {\n        // use hex representation of a number instead of number value\n        this.data = '';\n        for (var i = 0; i < this.source.length; i++) {\n            var hex = this.source[i].toString(16);\n            this.data += padHex(hex);\n        }\n    };\n    WebmUint.prototype.updateByData = function() {\n        var length = this.data.length / 2;\n        this.source = new Uint8Array(length);\n        for (var i = 0; i < length; i++) {\n            var hex = this.data.substr(i * 2, 2);\n            this.source[i] = parseInt(hex, 16);\n        }\n    };\n    WebmUint.prototype.getValue = function() {\n        return parseInt(this.data, 16);\n    };\n    WebmUint.prototype.setValue = function(value) {\n        this.setData(padHex(value.toString(16)));\n    };\n\n    function WebmFloat(name, type) {\n        WebmBase.call(this, name, type || 'Float');\n    }\n    doInherit(WebmFloat, WebmBase);\n    WebmFloat.prototype.getFloatArrayType = function() {\n        return this.source && this.source.length === 4 ? Float32Array : Float64Array;\n    };\n    WebmFloat.prototype.updateBySource = function() {\n        var byteArray = this.source.reverse();\n        var floatArrayType = this.getFloatArrayType();\n        var floatArray = new floatArrayType(byteArray.buffer);\n        this.data = floatArray[0];\n    };\n    WebmFloat.prototype.updateByData = function() {\n        var floatArrayType = this.getFloatArrayType();\n        var floatArray = new floatArrayType([ this.data ]);\n        var byteArray = new Uint8Array(floatArray.buffer);\n        this.source = byteArray.reverse();\n    };\n    WebmFloat.prototype.getValue = function() {\n        return this.data;\n    };\n    WebmFloat.prototype.setValue = function(value) {\n        this.setData(value);\n    };\n\n    function WebmContainer(name, type) {\n        WebmBase.call(this, name, type || 'Container');\n    }\n    doInherit(WebmContainer, WebmBase);\n    WebmContainer.prototype.readByte = function() {\n        return this.source[this.offset++];\n    };\n    WebmContainer.prototype.readUint = function() {\n        var firstByte = this.readByte();\n        var bytes = 8 - firstByte.toString(2).length;\n        var value = firstByte - (1 << (7 - bytes));\n        for (var i = 0; i < bytes; i++) {\n            // don't use bit operators to support x86\n            value *= 256;\n            value += this.readByte();\n        }\n        return value;\n    };\n    WebmContainer.prototype.updateBySource = function() {\n        this.data = [];\n        for (this.offset = 0; this.offset < this.source.length; this.offset = end) {\n            var id = this.readUint();\n            var len = this.readUint();\n            var end = Math.min(this.offset + len, this.source.length);\n            var data = this.source.slice(this.offset, end);\n\n            var info = sections[id] || { name: 'Unknown', type: 'Unknown' };\n            var ctr = WebmBase;\n            switch (info.type) {\n                case 'Container':\n                    ctr = WebmContainer;\n                    break;\n                case 'Uint':\n                    ctr = WebmUint;\n                    break;\n                case 'Float':\n                    ctr = WebmFloat;\n                    break;\n            }\n            var section = new ctr(info.name, info.type);\n            section.setSource(data);\n            this.data.push({\n                id: id,\n                idHex: id.toString(16),\n                data: section\n            });\n        }\n    };\n    WebmContainer.prototype.writeUint = function(x, draft) {\n        for (var bytes = 1, flag = 0x80; x >= flag && bytes < 8; bytes++, flag *= 0x80) { }\n\n        if (!draft) {\n            var value = flag + x;\n            for (var i = bytes - 1; i >= 0; i--) {\n                // don't use bit operators to support x86\n                var c = value % 256;\n                this.source[this.offset + i] = c;\n                value = (value - c) / 256;\n            }\n        }\n\n        this.offset += bytes;\n    };\n    WebmContainer.prototype.writeSections = function(draft) {\n        this.offset = 0;\n        for (var i = 0; i < this.data.length; i++) {\n            var section = this.data[i],\n                content = section.data.source,\n                contentLength = content.length;\n            this.writeUint(section.id, draft);\n            this.writeUint(contentLength, draft);\n            if (!draft) {\n                this.source.set(content, this.offset);\n            }\n            this.offset += contentLength;\n        }\n        return this.offset;\n    };\n    WebmContainer.prototype.updateByData = function() {\n        // run without accessing this.source to determine total length - need to know it to create Uint8Array\n        var length = this.writeSections('draft');\n        this.source = new Uint8Array(length);\n        // now really write data\n        this.writeSections();\n    };\n    WebmContainer.prototype.getSectionById = function(id) {\n        for (var i = 0; i < this.data.length; i++) {\n            var section = this.data[i];\n            if (section.id === id) {\n                return section.data;\n            }\n        }\n        return null;\n    };\n\n    function WebmFile(source) {\n        WebmContainer.call(this, 'File', 'File');\n        this.setSource(source);\n    }\n    doInherit(WebmFile, WebmContainer);\n    WebmFile.prototype.fixDuration = function(duration, options) {\n        var logger = options && options.logger;\n        if (logger === undefined) {\n            logger = function(message) {\n                console.log(message);\n            };\n        } else if (!logger) {\n            logger = function() { };\n        }\n\n        var segmentSection = this.getSectionById(0x8538067);\n        if (!segmentSection) {\n            logger('[fix-webm-duration] Segment section is missing');\n            return false;\n        }\n\n        var infoSection = segmentSection.getSectionById(0x549a966);\n        if (!infoSection) {\n            logger('[fix-webm-duration] Info section is missing');\n            return false;\n        }\n\n        var timeScaleSection = infoSection.getSectionById(0xad7b1);\n        if (!timeScaleSection) {\n            logger('[fix-webm-duration] TimecodeScale section is missing');\n            return false;\n        }\n\n        var durationSection = infoSection.getSectionById(0x489);\n        if (durationSection) {\n            if (durationSection.getValue() <= 0) {\n                logger(`[fix-webm-duration] Duration section is present, but the value is ${durationSection.getValue()}`);\n                durationSection.setValue(duration);\n            } else {\n                logger(`[fix-webm-duration] Duration section is present, and the value is ${durationSection.getValue()}`);\n                return false;\n            }\n        } else {\n            logger('[fix-webm-duration] Duration section is missing');\n            // append Duration section\n            durationSection = new WebmFloat('Duration', 'Float');\n            durationSection.setValue(duration);\n            infoSection.data.push({\n                id: 0x489,\n                data: durationSection\n            });\n        }\n\n        // set default time scale to 1 millisecond (1000000 nanoseconds)\n        timeScaleSection.setValue(1000000);\n        infoSection.updateByData();\n        segmentSection.updateByData();\n        this.updateByData();\n\n        return true;\n    };\n    WebmFile.prototype.toBlob = function(mimeType) {\n        return new Blob([ this.source.buffer ], { type: mimeType || 'video/webm' });\n    };\n\n    function fixWebmDuration(blob, duration, callback, options) {\n        // The callback may be omitted - then the third argument is options\n        if (typeof callback === \"object\") {\n            options = callback;\n            callback = undefined;\n        }\n\n        if (!callback) {\n            return new Promise(function(resolve) {\n                fixWebmDuration(blob, duration, resolve, options);\n            });\n        }\n\n        try {\n            var reader = new FileReader();\n            reader.onloadend = function() {\n                try {\n                    var file = new WebmFile(new Uint8Array(reader.result));\n                    if (file.fixDuration(duration, options)) {\n                        blob = file.toBlob(blob.type);\n                    }\n                } catch (ex) {\n                    // ignore\n                }\n                callback(blob);\n            };\n            reader.readAsArrayBuffer(blob);\n        } catch (ex) {\n            callback(blob);\n        }\n    }\n\n    // Support AMD import default\n    fixWebmDuration.default = fixWebmDuration;\n\n    return fixWebmDuration;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fix-webm-duration/fix-webm-duration.js\n");

/***/ })

};
;